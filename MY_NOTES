	@GetMapping(path = "/all")  // @RequestMapping(method=GET)
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
----------------------------------	
	@GetMapping("/")       // nawet nie potrzeba @ModelAttribute ?!!!
    public String showForm(PersonForm personForm) { // !!! model.addAttribute(PersonForm personForm)
        return "form";    //  a bean-backed form.
    }
	
---------------------------------

<p><input type="submit" value="Submit" /> <input type="reset" value="Reset" /></p>

---------------------------------

@Value("${welcome.message:test}")
 	private String message = "Hello World";
 ---------------------------------
 TEST:
 1- w AppInit wh CommandLineRunner , w controller, w JUnit
  @Test
    public void getHello() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get("/hello")
        		.accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().string(equalTo("Greetings from Spring Boot HelloController!")));
    }
    ------------------------------
    
    @RequestMapping("/fail")
	public String fail() {
		throw new MyException("Oh dear!");
	}

	@RequestMapping("/fail2")
	public String fail2() {
		throw new IllegalStateException(); // Whitelabel Error Page: This application has no explicit mapping for /error, so you are seeing this as a fallback.
	//PROBLEMS WITH JSP: Creating a custom error.jsp page does not override the default view for error handling. 
	// Custom error pages should be used instead.

	}
	
	// ta metoda włącza się gdy rzucany jest MyException i wyswietla obiekt MyRestResponse jako JSON
	@ExceptionHandler(MyException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public @ResponseBody MyRestResponse handleMyRuntimeException(MyException exception) {
		return new MyRestResponse("Some data I want to send back to the client.");
	}   
    
    
    -------------------------------
    Dzialajacy przyklad to  BootstrapAndJQueryController.java w aaa_Refer1
    JSP, CSS, JQUERY AND BOOTSTRAP:
    1. dependencies
    <dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.7</version>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap-datepicker</artifactId>
			<version>1.0.1</version>
		</dependency>
		
		dla JSP:
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		
	2. src/main/resources/static i tam /css i /js
	
	3. jsp page in WEB-INF/views z kodem	
	<head>
    <link href="webjars/bootstrap/3.3.7/css/bootstrap.min.css"   rel="stylesheet">
    <link href="css/custom.css" rel="stylesheet">
	</head>
	
	oraz na górze:
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script> 
	lub na dole:
	<script src="webjars/jquery/1.11.1/jquery.min.js"></script>
	
	i to na dole
    <script src="webjars/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    
    
   
   
----------------------------


Due to the default restart exclusions, changes to static resources do not trigger a restart of your application.
 They do, however, trigger a live reload.
 Alternatively, running in an IDE (especially with debugging on) is a good way to do development 
 (all modern IDEs allow reloading of static resources and usually also allow hot-swapping of Java class changes).
 
 Most of the templating technologies supported by Spring Boot include a configuration option to disable caching 
 (described later in this document). If you use the spring-boot-devtools module, these properties are 
 automatically configured for you at development time.
 If you use Thymeleaf, set spring.thymeleaf.cache to false
 ----------------------------------
 27.1.5 Static Content
By default, Spring Boot serves static content from a directory called /static (or /public or /resources or
 /META-INF/resources) in the classpath or from the root of the ServletContext.
 
 By default, resources are mapped on /**, but you can tune that with the spring.mvc.static-path-pattern property. 
 For instance, relocating all resources to /resources/** can be achieved as follows:
spring.mvc.static-path-pattern=/resources/**

Do not use the src/main/webapp directory if your application is packaged as a jar. Although this directory is 
a common standard, it works only with war packaging, and it is silently ignored 
by most build tools if you generate a jar.
--------------------------
tu jest projekt gdzie static folder jest wrzucony do webapp folderu...:
http://www.springboottutorial.com/spring-boot-with-static-content-css-and-javascript-js
 
 -----------------------
 TEMPLATE ENGINES
 http://www.baeldung.com/spring-template-engines
 
	Thymeleaf is auto-configured, JSP not.  Unlike other template engines, Thymeleaf allows using templates as prototypes, 
	meaning they can be viewed as static files. Spring Boot will provide auto-configuration for Thymeleaf by adding 
	the spring-boot-starter-thymeleaf dependency:No explicit configuration is necessary. 
	By default, HTML files should be placed in the resources/templates location.
	
	spring.mvc.view.prefix: /WEB-INF/views/
	spring.mvc.view.suffix: .jsp
	
	Spring MVC supports a variety of templating technologies including Thymeleaf, FreeMarker and JSPs.
	[...] When you’re using one of these templating engines with the default configuration, your 
	templates will be picked up automatically from src/main/resources/templates. - niejasny czy to odnosi sie do JSP
--------------------------------------------

Important Maven Commands
mvn –version -> Find the maven version
mvn compile -> compiles source files
mvn test-compile -> compiles test files - one thing to observe is this also compiles source files
mvn clean -> deletes target directory
mvn test -> run unit tests
mvn package -> creates a jar for the project
help:effective-settings -> Debug Maven Settings
help:effective-pom -> Look at the complete pom after all inheritances from parent poms are resolved
dependency:tree -> Look at all the dependencies and transitive dependencies
dependency:sources -> Download source code for all dependencies
–debug -> Debug flag. Can be used with all the above commands
----------------------------------------------
LIVE RELOAD
By default, any entry on the classpath that points to a folder will be monitored for changes.

Here are few important things to note:

These folders will not trigger reload by default

/META-INF/maven
/META-INF/resources
/resources
/static - nieprawda: zmiany css dziala, ale js nie dziala
/public
/templates
You can configure additional folders to scan.

application.properties

spring.devtools.restart.additional-paths = /path-to-folder
You can also configure folders to exclude.

spring.devtools.restart.exclude=static/**,public/**	
 
 -----------------------------------------

database=mysql
spring.datasource.schema=classpath*:db/${database}/schema.sql
spring.datasource.data=classpath*:db/${database}/data.sql


#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/aaa_school?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=coderslab
spring.datasource.tomcat.max-wait=20000
spring.datasource.tomcat.max-active=50
spring.datasource.tomcat.max-idle=20
spring.datasource.tomcat.min-idle=15

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = true

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# JPA
#spring.jpa.hibernate.ddl-auto=none

spring.jpa.show-sql=true

#Security Configuration---
#security.user.password= aaa_school
#prints default password---
#logging.level.org.springframework.boot.autoconfigure.security= INFO 

# Internationalization
spring.messages.basename=messages/messages
